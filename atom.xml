<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Winnie&#39;s.Blog</title>
  
  <subtitle>Welcome.Winnie&#39;s.Blog</subtitle>
  <link href="https://winniewuwinnie.github.io/atom.xml" rel="self"/>
  
  <link href="https://winniewuwinnie.github.io/"/>
  <updated>2023-01-05T04:00:09.937Z</updated>
  <id>https://winniewuwinnie.github.io/</id>
  
  <author>
    <name>Winnie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Palindrome Number - LeetCode</title>
    <link href="https://winniewuwinnie.github.io/2023/01/05/Palindrome-Number-LeetCode/"/>
    <id>https://winniewuwinnie.github.io/2023/01/05/Palindrome-Number-LeetCode/</id>
    <published>2023-01-05T03:13:37.000Z</published>
    <updated>2023-01-05T04:00:09.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h2><p><a href="https://leetcode.com/problems/palindrome-number/">9. Palindrome Number</a></p><h2 id="題目描述"><a href="#題目描述" class="headerlink" title="題目描述"></a>題目描述</h2><p>輸入一個整數 x ，如果回傳的迴文與原先的 x 值相同輸出 true ，反之則輸出 false。<br>註：迴文指由左念到右或由右念到左都相同的詞句。</p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;範例一&gt;</span><br><span class="line">輸入：x = 121</span><br><span class="line">輸出：true</span><br><span class="line">解釋：121 從左到右和從右到左讀作121。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;範例二&gt;</span><br><span class="line">輸入：x = -121</span><br><span class="line">輸出：false</span><br><span class="line">解釋：從左到右是-121。從右到左變成121-，因此它不是迴文。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;範例三&gt;</span><br><span class="line">輸入：x = 10</span><br><span class="line">輸出：false</span><br><span class="line">解釋：從左到右是10。從右到左變成0，因此它不是迴文。</span><br></pre></td></tr></table></figure><h2 id="運用知識點"><a href="#運用知識點" class="headerlink" title="運用知識點"></a>運用知識點</h2><table><thead><tr><th>知識點</th><th>使用說明</th></tr></thead><tbody><tr><td><a href="https://www.fooish.com/javascript/number/toString.html">toString()</a></td><td>轉換成字串</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split">String.prototype.split()</a></td><td>切割字串成字串陣列</td></tr><tr><td><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse">Array.prototype.reverse()</a></td><td>反轉陣列中的值</td></tr><tr><td><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/join">Array.prototype.join()</a></td><td>將陣列合併連接成字串</td></tr><tr><td><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness">相等比較</a></td><td>相等比較運算</td></tr></tbody></table><h2 id="解題流程"><a href="#解題流程" class="headerlink" title="解題流程"></a>解題流程</h2><blockquote><p>使用範例二作為解題範例。</p></blockquote><p>step1：使用數字轉字串 toString 方法將 x 轉成字串以利於後面使用陣列方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isPalindrome = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">toString</span>());<span class="comment">//-121</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>step2：使用字串分割方法 split ，將原字串分割成字串陣列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isPalindrome = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>));<span class="comment">//[&quot;-&quot;,&quot;1&quot;,&quot;2&quot;,&quot;1&quot;]</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>step3：使用陣列反轉 reverse 反轉陣列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isPalindrome = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>());<span class="comment">//[&quot;1&quot;,&quot;2&quot;,&quot;1&quot;,&quot;-&quot;]</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>step4：使用陣列合併字串方法 join ，將字串陣列連接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isPalindrome = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));<span class="comment">//&quot;121-&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>step5：使用比較運算子 &#x3D;&#x3D;&#x3D; （嚴格相等）比較字串反轉前後是否相同，值相同回傳 true ，反之則回傳 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isPalindrome = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="title function_">toString</span>() === x.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isPalindrome</span>(-<span class="number">121</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><a href="https://codepen.io/WinnieWuWinnie/pen/ExpgMWY?editors=1012">Codepen</a></p>]]></content>
    
    
    <summary type="html">輸入一個整數 x ，如果回傳的迴文與原先的 x 值相同輸出 true ，反之則輸出 false。</summary>
    
    
    
    <category term="前端" scheme="https://winniewuwinnie.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://winniewuwinnie.github.io/tags/JavaScript/"/>
    
    <category term="LeetCode" scheme="https://winniewuwinnie.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Vue 指令介紹</title>
    <link href="https://winniewuwinnie.github.io/2023/01/04/Vue-%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%B4%B9/"/>
    <id>https://winniewuwinnie.github.io/2023/01/04/Vue-%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%B4%B9/</id>
    <published>2023-01-04T07:08:43.000Z</published>
    <updated>2023-01-08T12:04:13.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基礎介紹"><a href="#基礎介紹" class="headerlink" title="基礎介紹"></a>基礎介紹</h2><table><thead><tr><th>名稱</th><th>範例</th><th>說明</th></tr></thead><tbody><tr><td>指令 Directives</td><td>v-model</td><td>Vue 專門使用於 HTML 上的方法</td></tr><tr><td>修飾符 Modifiers</td><td>v-model.number</td><td>讓指令更好運作</td></tr><tr><td>縮寫 Shorthands</td><td>v-on:click&#x3D;”” &#x3D;&gt; @:click&#x3D;””</td><td>讓程式碼更簡潔</td></tr></tbody></table><h2 id="綁定內容於畫面上"><a href="#綁定內容於畫面上" class="headerlink" title="綁定內容於畫面上"></a>綁定內容於畫面上</h2><h3 id="單筆資料渲染"><a href="#單筆資料渲染" class="headerlink" title="單筆資料渲染"></a>單筆資料渲染</h3><p><a href="https://codepen.io/WinnieWuWinnie/pen/zYLKwoL">範例 Codepen</a></p><table><thead><tr><th>名稱</th><th>說明</th><th>程式碼</th></tr></thead><tbody><tr><td>v-text</td><td>純文字渲染</td><td><code>&lt;p&gt;&lt;span v-text=&quot;name&quot;&gt;&lt;/span&gt; 在學程式&lt;/p&gt;</code></td></tr><tr><td><code>&#123;&#123;&#125;&#125;</code>(Mustache)(常用)</td><td>純文字渲染或任何表達式內容</td><td><code>&lt;p&gt;&#123;&#123;name&#125;&#125; 在學程式&lt;/p&gt;</code></td></tr><tr><td>v-html (少用)</td><td>渲染包含 HTML 標籤字串，但使用上要特別注意：請只對可信內容使用 HTML 插值，絕不要對用戶提供的內容使用插值。（XSS 攻擊），詳細說明可參考：<a href="https://cn.vuejs.org/v2/api/#v-html">https://cn.vuejs.org/v2/api/#v-html</a></td><td><code>&lt;div v-html=&quot;rawHtml&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td>v-once</td><td>單次綁定，第一次渲染之後即使資料有更動也不會再次渲染</td><td><code>&lt;p v-once&gt;&#123;&#123;name&#125;&#125;在學程式&lt;/p&gt;</code></td></tr><tr><td>v-pre</td><td>不會被轉譯</td><td><code>&lt;p v-pre&gt;&#123;&#123;name&#125;&#125;在學程式&lt;/p&gt;</code></td></tr></tbody></table><h4 id="進階技巧：表達式"><a href="#進階技巧：表達式" class="headerlink" title="進階技巧：表達式"></a>進階技巧：表達式</h4><blockquote><p>運用表達式會回傳值的特性。</p></blockquote><table><thead><tr><th>技巧</th><th>程式碼</th><th>畫面顯示</th></tr></thead><tbody><tr><td>樣板字面值</td><td><code>&#123;&#123;`$&#123;name&#125;在跳舞`&#125;&#125;</code></td><td>Winnie 在跳舞</td></tr><tr><td>反轉字串</td><td><code>&#123;&#123;text.split("").reverse().join("")&#125;&#125;</code></td><td>式程學在 einniW</td></tr><tr><td>綁定 methods</td><td><code>&#123;&#123;say("Ming")&#125;&#125;</code></td><td>Ming 在學程式</td></tr><tr><td>JS 運算</td><td><code>&#123;&#123;1+1&#125;&#125;</code></td><td>2</td></tr></tbody></table><h3 id="多筆資料渲染-v-for"><a href="#多筆資料渲染-v-for" class="headerlink" title="多筆資料渲染 v-for"></a>多筆資料渲染 v-for</h3><p><a href="https://codepen.io/WinnieWuWinnie/pen/XWBjgrQ?editors=1010">範例 Codepen</a></p><table><thead><tr><th>名稱</th><th>程式碼</th><th>說明</th></tr></thead><tbody><tr><td>v-for</td><td><code>&lt;li v-for=&quot;(item,key) in data中定義名稱&quot;&gt;&lt;/li&gt;</code></td><td>陣列&#x2F;物件迴圈，item 表陣列&#x2F;物件中的單筆物件，key 表陣列中的索引值&#x2F;物件屬性名稱</td></tr><tr><td></td><td><code>&lt;li v-for=&quot;自訂名稱 in 5&quot;&gt;&lt;/li&gt;</code></td><td>純數值迴圈</td></tr></tbody></table><ul><li><strong>v-for 會跟一個 key 來進行綁定</strong>，有相同父元素的子元素必須有獨特的 key。重複的 key 會造成渲染錯誤。例如：當 Vue 認為某一區塊沒有進行變動就不會做渲染更新。</li><li>當節點不同無法使用同一個 v-for 時，可使用 <strong><code>&lt;template&gt;</code></strong> 將兩個節點包覆。</li></ul><h3 id="條件判斷-v-if、v-else、v-else-if"><a href="#條件判斷-v-if、v-else、v-else-if" class="headerlink" title="條件判斷 v-if、v-else、v-else-if"></a>條件判斷 v-if、v-else、v-else-if</h3><p><a href="https://codepen.io/WinnieWuWinnie/pen/poZErzz?editors=0010">範例 Codepen</a></p><table><thead><tr><th>名稱</th><th>程式碼</th><th>說明</th></tr></thead><tbody><tr><td>v-if</td><td><code>&lt;p v-if=&quot;isFull&quot;&gt;小明 飽了&lt;/p&gt;</code></td><td>判斷 HTML 的節點是否呈現，當回傳值為真值會呈現，反之則不呈現或對接至 v-else 、 v-else-if</td></tr><tr><td>v-else</td><td><code>&lt;p v-else=&quot;isFull&quot;&gt;小明 還沒吃飽&lt;/p&gt;</code></td><td>當 v-if 值為 false 會對接到 v-else</td></tr><tr><td>v-else-if</td><td><code>&lt;div v-if=&quot;link===&#39;小明&#39;&quot;&gt;小明吃早餐&lt;/div&gt;&lt;div v-else-if=&quot;link===&#39;小美&#39;&quot;&gt;小美去百貨公司&lt;/div&gt;</code></td><td>當 v-if 值為 false 會對接到 v-else-if</td></tr></tbody></table><ul><li>避免 v-for 與 v-if 使用於同一標籤上，可使用 HTML 標籤 <strong><code>&lt;template&gt;&lt;/template&gt;</code></strong> 解決此問題。</li><li>v-if 與 v-show 差別：在 HTML 中 v-if 判斷是直接移除 DOM 元素，使其從 HTML 結構上消失，使用此方法切換 Vue 元件時，元件的生命週期會重新計算，而 v-show 則是使用 display:none 隱藏顯示。</li><li>v-if、v-show 怎麼選擇？<blockquote><p>當元件生命週期需要在顯示時重新計算，則可以使用 v-if，如果則否可用 v-show。<br>當元件隱藏時，同時需要完整移除 DOM 結構，也可使用 v-if</p></blockquote></li></ul><h3 id="HTML-綁定-v-bind"><a href="#HTML-綁定-v-bind" class="headerlink" title="HTML 綁定 v-bind"></a>HTML 綁定 v-bind</h3><h4 id="屬性綁定"><a href="#屬性綁定" class="headerlink" title="屬性綁定"></a>屬性綁定</h4><p><a href="https://codepen.io/WinnieWuWinnie/pen/NWBRveG?editors=1011">範例 Codepen</a></p><table><thead><tr><th>名稱</th><th>程式碼</th><th>縮寫</th><th>說明</th></tr></thead><tbody><tr><td>v-bind</td><td><code>v-bind:HTML屬性=&quot; &quot;</code></td><td>:HTML屬性&#x3D;” “</td><td>綁定 HTML 屬性，將資料傳遞到元素上。</td></tr></tbody></table><ul><li>動態綁定屬性－:[]</li></ul><h4 id="樣式綁定"><a href="#樣式綁定" class="headerlink" title="樣式綁定"></a>樣式綁定</h4><p><a href="https://codepen.io/WinnieWuWinnie/pen/ZEjBraa?editors=1010">範例 Codepen</a></p><h5 id="class-樣式綁定"><a href="#class-樣式綁定" class="headerlink" title="class 樣式綁定"></a>class 樣式綁定</h5><table><thead><tr><th>名稱</th><th>程式碼</th></tr></thead><tbody><tr><td>物件寫法</td><td><code>v-bind:class = &quot;&#123; className:真/假值 ,...&#125;&quot;</code></td></tr><tr><td>陣列寫法</td><td><code>v-bind:class = &quot;[ className ,...]&quot;</code></td></tr></tbody></table><ul><li>若 className 中間有「-」，可使用’’將其包覆。<br>可以透過 :class 的物件綁定並動態切換 Class，物件的屬性為 className，後方的值是表達式結果，如果為真值則會套用該 className。</li></ul><h5 id="style-行內樣式綁定"><a href="#style-行內樣式綁定" class="headerlink" title="style 行內樣式綁定"></a>style 行內樣式綁定</h5><table><thead><tr><th>名稱</th><th>程式碼</th></tr></thead><tbody><tr><td>物件寫法</td><td><code>v-bind:style=&quot;&#123; style 屬性:&#39;style 相對應的值&#39;,...&#125;&quot;</code></td></tr><tr><td>陣列寫法</td><td><code>v-bind:style=&quot;[&#123; style 屬性:&#39;style 相對應的值&#39;,...&#125;,&#123;...&#125;,...]&quot;</code></td></tr></tbody></table><h2 id="資料雙向綁定-v-model"><a href="#資料雙向綁定-v-model" class="headerlink" title="資料雙向綁定 v-model"></a>資料雙向綁定 v-model</h2><p><a href="https://codepen.io/WinnieWuWinnie/pen/OJwbKOB">範例 Codepen</a></p><table><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td>v-model</td><td>用於資料與元件產生雙向綁定，<br><strong>常套用於<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;checkbox&gt;</code>、<code>&lt;radio&gt;</code>、<code>&lt;select&gt;</code>表單結構</strong>。</td></tr></tbody></table><p>注意：v-model 會忽略所有表單元素的 value、checked、selected 特性的初始值而總是將 Vue 實例的數據作為數據來源。需透過 JavaScript 在元件的 data 選項中宣告初始值。</p><ul><li><p><code>&lt;checkbox&gt;</code> 通常使用於複選</p><ul><li>單選 true&#x2F;false：需顯示值時可運用「三元運算子」或是在 <code>&lt;input&gt;</code> 標籤內寫入 <strong>「true-value&#x3D;”值”」、「false-value&#x3D;”值”」</strong>。</li><li>複選：使用陣列[]定義 data 資料，運作方式即為將選擇的選項加入陣列中。</li></ul></li><li><p><code>&lt;radio&gt;</code> 單選</p><ul><li>定義 data 資料時定義為單一個值。</li></ul></li><li><p><code>&lt;select&gt;</code></p><ul><li>單選：運作方式會將 value 中的值帶入 data 資料中。</li><li>複選：使用陣列[]定義 data 資料，並在 <code>&lt;select&gt;</code> 標籤內加上 <strong>multiple</strong> 表多選，選擇時須按住 ctrl 才可多選。</li></ul></li></ul><h3 id="v-model-修飾符"><a href="#v-model-修飾符" class="headerlink" title="v-model 修飾符"></a>v-model 修飾符</h3><blockquote><p>v-model.修飾符&#x3D;” “</p></blockquote><p><a href="https://codepen.io/WinnieWuWinnie/pen/Yzjpmja">範例 Codepen</a></p><table><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td>lazy</td><td>避免持續性觸發，可以在編輯完後才觸發資料更新<br>（使用 change 的形式進行同步）</td></tr><tr><td>number</td><td>限制只有數值型別的資料才能寫入，<br>且資料會是以 <strong>number 型別</strong>傳入，無法透過該 input 套用其它資料型別。</td></tr><tr><td>trim</td><td>修飾掉首尾的空白</td></tr></tbody></table><h2 id="事件觸發-v-on"><a href="#事件觸發-v-on" class="headerlink" title="事件觸發 v-on"></a>事件觸發 v-on</h2><p><a href="https://codepen.io/WinnieWuWinnie/pen/PoBWYjY">範例 Codepen</a></p><table><thead><tr><th>名稱</th><th>程式碼</th><th>縮寫</th><th>說明</th></tr></thead><tbody><tr><td>v-on</td><td><code>v-on:DOM事件=&quot; &quot;</code></td><td><code>@DOM事件=&quot;&quot;</code></td><td>觸發 methods 方法。<br> 常用 DOM 事件 click、change、submit。</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li>將 <strong>submit 事件綁訂於 <code>&lt;form&gt;</code></strong> 上讓這個表單符合此事件才觸發，但綁在 <code>&lt;button&gt;</code> 上只有按下按鈕才會觸發。</li><li>動態事件：v-on:[事件]&#x3D;” “</li><li>動態物件方法，在一個物件上需加入多個事件，但此方法無法傳入參數。<code>v-on=&quot;&#123;DOM事件:method方法 ,...&#125;&quot;</code></li></ul><h3 id="v-on-修飾符"><a href="#v-on-修飾符" class="headerlink" title="v-on 修飾符"></a>v-on 修飾符</h3><blockquote><p>v-on: DOM 事件.修飾符&#x3D;” “</p></blockquote><p><a href="https://codepen.io/WinnieWuWinnie/pen/qByRdVM?editors=1111">範例 Codepen</a><br><a href="https://codepen.io/WinnieWuWinnie/pen/LYBxVgq">補充 Codepen</a></p><h4 id="按鍵修飾符（鍵盤事件）"><a href="#按鍵修飾符（鍵盤事件）" class="headerlink" title="按鍵修飾符（鍵盤事件）"></a>按鍵修飾符（鍵盤事件）</h4><table><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td><a href="https://cn.vuejs.org/guide/essentials/event-handling.html#key-modifiers">別名修飾</a></td><td>常使用到的按鍵。ex.enter、tab、delete</td></tr><tr><td>相應按鍵</td><td>按下組合按鍵。ex.shift+enter</td></tr><tr><td>特定鍵</td><td>按下特定按鍵。ex.h</td></tr></tbody></table><h4 id="滑鼠修飾符（滑鼠事件）"><a href="#滑鼠修飾符（滑鼠事件）" class="headerlink" title="滑鼠修飾符（滑鼠事件）"></a>滑鼠修飾符（滑鼠事件）</h4><table><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td>left</td><td>左鍵</td></tr><tr><td>middle</td><td>中鍵</td></tr><tr><td>right</td><td>右鍵</td></tr></tbody></table><h4 id="事件修飾符"><a href="#事件修飾符" class="headerlink" title="事件修飾符"></a>事件修飾符</h4><table><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td><strong>prevent</strong></td><td>調用 event.preventDefault()，移除原生 HTML 事件。</td></tr><tr><td>stop</td><td>防止向外尋找，調用 event.stopPropagation。（調整冒泡事件）</td></tr><tr><td>capture</td><td>冒泡事件原本觸發為由內而外，<strong>capture 模式改由外而內</strong>，添加事件偵聽器時使用 capture 模式。（調整冒泡事件）</td></tr><tr><td>self</td><td>只觸發自己範圍內的元素。（調整冒泡事件）</td></tr><tr><td>once</td><td>無論事件產生多少次，只觸發一次回調。</td></tr></tbody></table><hr><p>學習來源：<a href="https://courses.hexschool.com/courses/enrolled/1326387">六角學院–Vue 3 實戰影音課程</a></p>]]></content>
    
    
    <summary type="html">Vue 指令介紹</summary>
    
    
    
    <category term="前端" scheme="https://winniewuwinnie.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://winniewuwinnie.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Richest Customer Wealth - LeetCode</title>
    <link href="https://winniewuwinnie.github.io/2023/01/03/Richest%20Customer%20Wealth%20-%20LeetCode/"/>
    <id>https://winniewuwinnie.github.io/2023/01/03/Richest%20Customer%20Wealth%20-%20LeetCode/</id>
    <published>2023-01-03T03:28:20.000Z</published>
    <updated>2023-01-03T09:06:57.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h2><p><a href="https://leetcode.com/problems/richest-customer-wealth/">1672.Richest Customer Wealth</a></p><h2 id="題目描述"><a href="#題目描述" class="headerlink" title="題目描述"></a>題目描述</h2><p>你會獲得一個帳號中的內有數筆金額是各客戶在銀行的財富，客戶的財富是其銀行中所有資產的累加，請計算最富有的客戶財富。</p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;範例一&gt;</span><br><span class="line">輸入：accounts = [[1,2,3],[3,2,1]]</span><br><span class="line">輸出：6</span><br><span class="line">解釋：</span><br><span class="line">第一位客戶的財富 = 1 + 2 + 3 = 6</span><br><span class="line">第二位客戶的財富 = 3 + 2 + 1 = 6</span><br><span class="line">兩為客戶的財富都是 6，都被認為是最富有的，所以輸出值為 6。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;範例二&gt;</span><br><span class="line">輸入：accounts = [[1,5],[7,3],[3,5]]</span><br><span class="line">輸出：10</span><br><span class="line">解釋：</span><br><span class="line">第一位客戶的財富 = 6</span><br><span class="line">第二位客戶的財富 = 10</span><br><span class="line">第三位客戶的財富 = 8</span><br><span class="line">第二位客戶是最富有的人擁有 10 的財富。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;範例三&gt;</span><br><span class="line">輸入：accounts = [[2,8,7],[7,1,3],[1,9,5]]</span><br><span class="line">輸出：7</span><br><span class="line">解釋：</span><br><span class="line">第一位客戶的財富 = 17</span><br><span class="line">第二位客戶的財富 = 11</span><br><span class="line">第三位客戶的財富 = 15</span><br><span class="line">第一位客戶是最富有的人擁有 17 的財富。</span><br></pre></td></tr></table></figure><h2 id="運用知識點"><a href="#運用知識點" class="headerlink" title="運用知識點"></a>運用知識點</h2><table><thead><tr><th>知識點</th><th>使用說明</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">Array.prototype.forEach()</a></td><td>取出陣列中的數值</td></tr><tr><td><a href="https://www.delftstack.com/zh-tw/howto/javascript/javascript-max-of-array/">Math.max()</a></td><td>取得陣列中最大值</td></tr></tbody></table><h2 id="解題流程"><a href="#解題流程" class="headerlink" title="解題流程"></a>解題流程</h2><blockquote><p>使用範例三作為解題範例。</p></blockquote><p>step1：使用 forEach 取出陣列中的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maximumWealth = <span class="keyword">function</span> (<span class="params">accounts</span>) &#123;</span><br><span class="line">  accounts.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">//[2,8,7],[7,1,3],[1,9,5]</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>step2：使用 forEach 取出內層陣列中的數值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maximumWealth = <span class="keyword">function</span> (<span class="params">accounts</span>) &#123;</span><br><span class="line">  accounts.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    item.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">num</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(num);  <span class="comment">//2,8,7,7,1,3,1,9,5</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>step3：宣告一個變數 total 先給予值為0，將變數 total 與變數 num 加總取得內層列數值總和。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maximumWealth = <span class="keyword">function</span> (<span class="params">accounts</span>) &#123;</span><br><span class="line">  accounts.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> total=<span class="number">0</span>;</span><br><span class="line">    item.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">num</span>)&#123;</span><br><span class="line">      total+=num;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(total);<span class="comment">//17,11,15</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>step4：宣告一個變數 totalAry 先給予值為空陣列[]，將內層列數值總和依序放入totalAry 內。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maximumWealth = <span class="keyword">function</span> (<span class="params">accounts</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> totalAry=[];</span><br><span class="line">  accounts.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> total=<span class="number">0</span>;</span><br><span class="line">    item.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">num</span>)&#123;</span><br><span class="line">      total+=num;</span><br><span class="line">    &#125;)</span><br><span class="line">      totalAry.<span class="title function_">push</span>(total);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(totalAry);<span class="comment">//[17,11,15]</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>step5：使用陣列取得最大值方法 Math.max，取出 totalAry 陣列中最大值並回傳。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maximumWealth = <span class="keyword">function</span> (<span class="params">accounts</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> totalAry=[];</span><br><span class="line">  accounts.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> total=<span class="number">0</span>;</span><br><span class="line">    item.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">num</span>)&#123;</span><br><span class="line">      total+=num;</span><br><span class="line">    &#125;)</span><br><span class="line">      totalAry.<span class="title function_">push</span>(total);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...totalAry);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">maximumWealth</span>([[<span class="number">2</span>, <span class="number">8</span>, <span class="number">7</span>],[<span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>]]));<span class="comment">//17</span></span><br></pre></td></tr></table></figure><p><a href="https://codepen.io/WinnieWuWinnie/pen/jOprQqQ?editors=1012">Codepen</a></p>]]></content>
    
    
    <summary type="html">取得最富有客戶之財富值</summary>
    
    
    
    <category term="前端" scheme="https://winniewuwinnie.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://winniewuwinnie.github.io/tags/JavaScript/"/>
    
    <category term="LeetCode" scheme="https://winniewuwinnie.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 入門</title>
    <link href="https://winniewuwinnie.github.io/2023/01/02/Vue-js-%E5%85%A5%E9%96%80/"/>
    <id>https://winniewuwinnie.github.io/2023/01/02/Vue-js-%E5%85%A5%E9%96%80/</id>
    <published>2023-01-02T13:00:14.000Z</published>
    <updated>2023-01-05T15:26:16.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="關注點分離"><a href="#關注點分離" class="headerlink" title="關注點分離"></a>關注點分離</h2><blockquote><p><strong>資料是一個獨立區塊</strong>，不會混用於渲染、生命週期及事件觸發。</p></blockquote><p><img src="https://i.imgur.com/EQylf4G.png" alt="Image"><br>圖片說明：畫面進入時先觸發生命週期，生命週期再觸發渲染，取得資料內容渲染在畫面上。</p><p><img src="https://i.imgur.com/ky6Txss.png" alt="Image"><br>圖片說明：點擊按鈕觸發事件更動資料內容，更動內容觸發後再重新渲染，取得更新後的文字渲染到畫面上。</p><h3 id="MVVM-概念-（Model-View-ViewModel）"><a href="#MVVM-概念-（Model-View-ViewModel）" class="headerlink" title="MVVM 概念 （Model View ViewModel）"></a>MVVM 概念 （Model View ViewModel）</h3><blockquote><p>原有的關注點分離是透過一個方法將資料渲染到畫面上，而 Vue 透過 MVVM 概念來處理關注點分離。</p></blockquote><p><img src="https://i.imgur.com/indnIKS.png" alt="Image"><br>圖片說明：MVVM 由 <strong>View 畫面、ViewModel 資料繫結器、Model 資料狀態</strong>三部分來組成，當 Model 有任何資料的改變，ViewModel 會自動把資料綁定，渲染到 View畫面上。<strong>View 與 Model 使用 viewModel 達到雙向綁定</strong>。</p><h4 id="雙向綁定"><a href="#雙向綁定" class="headerlink" title="雙向綁定"></a>雙向綁定</h4><p>Model → View：透過數據綁定，將資料狀態傳遞的數據轉化成所看到的頁面。<br>View → Model：透過 DOM 監聽事件，將所看到的頁面轉化成資料狀態。</p><p>這邊的關注點分離就是將處理 View （畫面）及處理 Model（資料）的部分分離，再透過 ViewModel 的機制讓兩邊的狀態同步，也就是下圖 v-model 指令，<strong>使用 v-model 將畫面及資料產生雙向綁定</strong>。</p><p><img src="https://i.imgur.com/Akhos16.png" alt="Image"></p><h2 id="Vue-js-起手式"><a href="#Vue-js-起手式" class="headerlink" title="Vue.js 起手式"></a>Vue.js 起手式</h2><blockquote><p>建議安裝 Chrome 開發者工具 <a href="https://chrome.google.com/webstore/detail/vuejs-devtools/ljjemllljcmogpfapbkkighbhhppjdbg">Vue.js devtools</a>，可以在瀏覽器開發人員工具上查看元件、資料狀態。</p></blockquote><h3 id="步驟拆解"><a href="#步驟拆解" class="headerlink" title="步驟拆解"></a>步驟拆解</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> <span class="comment">&lt;!--step1.定義一個區塊，大部分會使用 id 來命名 --&gt;</span></span><br><span class="line">  &#123;&#123;counter&#125;&#125; <span class="comment">&lt;!--step5.使用&#123;&#123;&#125;&#125;將資料顯示於畫面上--&gt;</span></span><br><span class="line">  &#123;&#123;text&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> <span class="comment">//step2.插入一個 script 緊鄰 step1 區塊</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123; <span class="comment">//step3.建立元件內容</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">counter</span>:<span class="number">6</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>:<span class="string">&quot;這是一段話&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>) <span class="comment">//step4.使用mount指定元件要掛載到哪一個區塊</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="結構說明"><a href="#結構說明" class="headerlink" title="結構說明"></a>結構說明</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;counter&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span>按鈕<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="comment">&lt;!-- 使用 v-on 來觸發 methods 中的方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app=&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//資料（函式）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">counter</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//生命週期（函式）:元件生成必經過程，有些資料在進入元件之後才進行調整的話，就可以在生命週期裡進行調整 ex.從遠端取得資料</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//Proxy</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">counter</span>=<span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方法（物件）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">clickMe</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">counter</span>+=<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(app).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Proxy-機制"><a href="#Proxy-機制" class="headerlink" title="Proxy 機制"></a>Proxy 機制</h4><blockquote><p>Proxy 機制會攔截目前所有的值，當有任何變化時就進行攔截，並且給予相對應的反應。在 Proxy 的 target 中可以看到自定義的值及 Vue 所定義的方法，因此<strong>所定義的值會自動展開在 target 物件下，所以使用 this 就可以取用到 Proxy 內的所有值。</strong></p></blockquote><p><img src="https://i.imgur.com/Wi5HAfd.png" alt="Image"></p><h3 id="相關-Codepen"><a href="#相關-Codepen" class="headerlink" title="相關 Codepen"></a>相關 Codepen</h3><p><a href="https://codepen.io/WinnieWuWinnie/pen/BaPzvej?editors=1011">起手是常見結構</a><br><a href="https://codepen.io/WinnieWuWinnie/pen/LYBZqzw">將資料加入於 Vue Data</a><br><a href="https://codepen.io/WinnieWuWinnie/pen/abjZxoW">完成新增、編輯商品項目</a></p><hr><p>學習來源：<br><br><a href="https://courses.hexschool.com/courses/enrolled/1326387">六角學院–Vue 3 實戰影音課程</a><br><a href="https://v1-cn.vuejs.org/guide/overview.html">Vue.js</a><br><a href="https://ithelp.ithome.com.tw/articles/10265372">Vue.js 從零開始：MVVM、漸進式框架</a></p>]]></content>
    
    
    <summary type="html">Vue.js 入門：關注點分離、MVVM 概念、雙向綁定、 Vue 基礎結構、Proxy 機制</summary>
    
    
    
    <category term="前端" scheme="https://winniewuwinnie.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://winniewuwinnie.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>ES Module</title>
    <link href="https://winniewuwinnie.github.io/2023/01/02/ES%20Module/"/>
    <id>https://winniewuwinnie.github.io/2023/01/02/ES%20Module/</id>
    <published>2023-01-02T07:52:38.000Z</published>
    <updated>2023-01-02T10:06:46.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在瀏覽器上運行-ES-模組"><a href="#在瀏覽器上運行-ES-模組" class="headerlink" title="在瀏覽器上運行 ES 模組"></a>在瀏覽器上運行 ES 模組</h2><blockquote><p>1.將標籤定義 <code>&lt;script type=&quot;module&quot;&gt;</code>，才可進行程式碼的匯入及匯出。<br>2.每一個 <code>&lt;script type=&quot;module&quot;&gt;&lt;/script&gt;</code> 區塊的作用域都是獨立的。<br>3.網路上找到的 “ESM”，如果條件允許是可以使用 import 方式載入。</p></blockquote><h3 id="匯出匯入觀念"><a href="#匯出匯入觀念" class="headerlink" title="匯出匯入觀念"></a>匯出匯入觀念</h3><p><img src="https://i.imgur.com/ZL2TJFJ.png" alt="Image"></p><h4 id="匯出-JS"><a href="#匯出-JS" class="headerlink" title="匯出- JS"></a>匯出- JS</h4><ul><li><strong>預設匯出</strong>：每個檔案只有一個 default。<blockquote><p>常見的匯出方式，通常用於匯出物件，在 Vue 開發中可用來匯出元件<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> 值</span><br></pre></td></tr></table></figure></p></blockquote></li><li><strong>具名匯出</strong>：每個檔案可以有多個。<blockquote><p>可用於匯出已定義的變數、物件、函式，專案開發中通常用於「方法匯出」，第三方的框架、函式、套件很常使用具名定義「方法」。<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;匯出函式&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote></li></ul><h4 id="匯入-HTML、JS"><a href="#匯入-HTML、JS" class="headerlink" title="匯入- HTML、JS"></a>匯入- HTML、JS</h4><ul><li><strong>預設匯入</strong>：  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 自訂名稱 <span class="keyword">from</span> <span class="string">&quot;檔名.js&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>具名匯入</strong>：<ul><li><strong>單一匯入（建議寫法）</strong>：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; 具名名稱 &#125; <span class="keyword">from</span> <span class="string">&quot;檔名.js&quot;</span></span><br></pre></td></tr></table></figure></li><li>全部匯入（不建議寫法，錯誤較難發現）：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全部匯出可能會造成名稱上的衝突，所以使用 as 賦予到一個物件名稱上</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> 物件名稱 <span class="keyword">from</span> <span class="string">&quot;檔名.js&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="sideEffect"><a href="#sideEffect" class="headerlink" title="sideEffect"></a>sideEffect</h3><blockquote><p>不須進行匯出，但可直接匯入，且匯入後可直接執行。常見案例如：jQuery</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 檔名 sideEffect.js</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">global</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">global</span>.<span class="property">$</span> = <span class="string">&#x27;我是 jQuery&#x27;</span>;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./sideEffect.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($) <span class="comment">//我是 jQuery </span></span><br></pre></td></tr></table></figure><hr><p>學習來源：<a href="https://courses.hexschool.com/courses/enrolled/1326387">六角學院–Vue 3 實戰影音課程</a></p>]]></content>
    
    
    <summary type="html">ES Module 就是 JavaScript 的模組化，可以將檔案進行拆分來匯出、匯入，過去必須透過工具來編譯，但近幾年瀏覽器已開始支援原生的模組功能。</summary>
    
    
    
    <category term="前端" scheme="https://winniewuwinnie.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://winniewuwinnie.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>關注點分離</title>
    <link href="https://winniewuwinnie.github.io/2023/01/01/%E9%97%9C%E6%B3%A8%E9%BB%9E%E5%88%86%E9%9B%A2/"/>
    <id>https://winniewuwinnie.github.io/2023/01/01/%E9%97%9C%E6%B3%A8%E9%BB%9E%E5%88%86%E9%9B%A2/</id>
    <published>2023-01-01T10:19:16.000Z</published>
    <updated>2023-01-01T16:20:28.267Z</updated>
    
    <content type="html"><![CDATA[<p>關注點分離是目前主流框架都會帶入的概念，<strong>框架會較為專注在資料處理上，而畫面會透過框架的方式進行渲染</strong>，關於這部分與 this 的運作也有很大的關係。</p><span id="more"></span><h2 id="常見的原始作法"><a href="#常見的原始作法" class="headerlink" title="常見的原始作法"></a>常見的原始作法</h2><p><img src="https://i.imgur.com/b7jDJjE.png" alt="Image"><br>註：紅框為畫面，綠框為輸入欄位</p><h2 id="關注點分離作法"><a href="#關注點分離作法" class="headerlink" title="關注點分離作法"></a>關注點分離作法</h2><p><img src="https://i.imgur.com/6iyUD1c.png" alt="Image"><br>註：紅框為畫面，綠框為輸入欄位，藍框為資料集</p><h3 id="優點："><a href="#優點：" class="headerlink" title="優點："></a>優點：</h3><p>對於開發者在開發時不會把畫面的程式碼跟操作或是資料的程式碼混在一起，資料與畫面是拆分開的，管理上較為便利。</p><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ul><li><strong>畫面－HTML</strong></li><li><strong>資料－JS data</strong></li><li><strong>方法－JS function</strong>（協助畫面與資料溝通之間的橋樑）</li></ul><h4 id="以物件方式建立元件，元件結構如下，"><a href="#以物件方式建立元件，元件結構如下，" class="headerlink" title="以物件方式建立元件，元件結構如下，"></a>以<strong>物件</strong>方式建立元件，元件結構如下，</h4><ul><li><strong>資料</strong></li><li><strong>方法、觸發器</strong></li><li><strong>生命週期（初始化）</strong>：進入畫面第一次會被觸發的方法  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> component = &#123;</span><br><span class="line">  <span class="comment">//資料</span></span><br><span class="line">  <span class="attr">data</span>: [<span class="string">&quot;待辦事項一&quot;</span>, <span class="string">&quot;待辦事項二&quot;</span>, <span class="string">&quot;待辦事項三&quot;</span>],</span><br><span class="line">  <span class="comment">//事件觸發</span></span><br><span class="line">  <span class="title function_">removeData</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this);</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">splice</span>(id, <span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//渲染方法(Vue.js會處理這部分)</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">      str += <span class="string">`&lt;li&gt;<span class="subst">$&#123;item&#125;</span>&lt;button type=&quot;button&quot; class=&quot;btn&quot; data-id=&quot;<span class="subst">$&#123;index&#125;</span>&quot;&gt;刪除&lt;/button&gt;&lt;/li&gt;`</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    list.<span class="property">innerHTML</span> = str;</span><br><span class="line">    <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.btn&quot;</span>);</span><br><span class="line">    btns.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      item.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(this);//使用箭頭函式讓 this 指向 component</span></span><br><span class="line">        <span class="comment">// 重點，移除項目是先移除資料，而不是直接移除 DOM</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">removeData</span>(e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//生命週期</span></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">component.<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure>  <a href="https://codepen.io/WinnieWuWinnie/pen/eYjzzEN?editors=0011">Codepen</a></li></ul><hr><p>學習來源：<a href="https://courses.hexschool.com/courses/enrolled/1326387">六角學院–Vue 3 實戰影音課程</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;關注點分離是目前主流框架都會帶入的概念，&lt;strong&gt;框架會較為專注在資料處理上，而畫面會透過框架的方式進行渲染&lt;/strong&gt;，關於這部分與 this 的運作也有很大的關係。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://winniewuwinnie.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://winniewuwinnie.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 常見縮寫</title>
    <link href="https://winniewuwinnie.github.io/2023/01/01/JS%E5%B8%B8%E8%A6%8B%E7%B8%AE%E5%AF%AB/"/>
    <id>https://winniewuwinnie.github.io/2023/01/01/JS%E5%B8%B8%E8%A6%8B%E7%B8%AE%E5%AF%AB/</id>
    <published>2023-01-01T06:42:59.000Z</published>
    <updated>2023-01-02T16:46:29.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6-語法糖與新增語法"><a href="#ES6-語法糖與新增語法" class="headerlink" title="ES6 語法糖與新增語法"></a>ES6 語法糖與新增語法</h2><ul><li><strong>語法糖</strong>：即為<strong>縮寫</strong>，寫法更為簡潔，但不影響運作。</li><li><strong>新增語法</strong>：寫法簡潔，但會影響作。 ex.箭頭函式<span id="more"></span></li></ul><h2 id="物件字面值-Object-literals"><a href="#物件字面值-Object-literals" class="headerlink" title="物件字面值 Object literals"></a>物件字面值 Object literals</h2><blockquote><p>針對原大括號定義物件提供縮寫方式。</p></blockquote><h3 id="1-物件內的函式"><a href="#1-物件內的函式" class="headerlink" title="1.物件內的函式"></a>1.<strong>物件內的函式</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">  <span class="attr">myName</span>:<span class="string">&quot;Winnie&quot;</span>,</span><br><span class="line">  <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">myName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>物件中的函式可以縮寫如下，<strong>移除 :function</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  myName : <span class="string">&quot;Winnie&quot;</span>,</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">myName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-物件內的變數"><a href="#2-物件內的變數" class="headerlink" title="2.物件內的變數"></a>2.<strong>物件內的變數</strong></h3><blockquote><p><strong>輸入的屬性名稱與值為同名時，可省略屬性名稱。</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name : <span class="string">&quot;Winnie&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSomeone</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">  person : person,</span><br><span class="line">  callSomeone : callSomeone</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>物件內的變數可縮寫如下，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">  person,</span><br><span class="line">  callSomeone</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="展開"><a href="#展開" class="headerlink" title="展開"></a>展開</h2><h3 id="1-不同陣列合併"><a href="#1-不同陣列合併" class="headerlink" title="1.不同陣列合併"></a>1.<strong>不同陣列合併</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> groupStr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> groupNum = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> groupAll = groupStr.<span class="title function_">concat</span>(groupNum);</span><br></pre></td></tr></table></figure><p><strong>運用「…」展開</strong>手法可縮寫如下，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> groupAll = [...groupStr,...groupNum];</span><br></pre></td></tr></table></figure><p>2.<strong>物件擴展</strong></p><blockquote><p>新增一個物件包含新方法，同時加入原有的舊方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> methods = &#123;</span><br><span class="line">  <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方法一&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方法二&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newMethod = &#123;</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新方法&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  ...methods</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.<strong>轉成純陣列</strong></p><blockquote><p>將類陣列轉換回純陣列，即可取得完整的陣列方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="comment">//此處的 list 為「類陣列」</span></span><br><span class="line"><span class="keyword">const</span> newList =　[...list];</span><br></pre></td></tr></table></figure><p>4.<strong>預設值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>)) <span class="comment">//NaN，因為b不存在</span></span><br></pre></td></tr></table></figure><p>使用預設值手法修改如下，若 b 有傳入數值，則使用該數值；若 b 無傳入數值，則使用預設值0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b=<span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>)) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><hr><p>學習來源：<a href="https://courses.hexschool.com/courses/enrolled/1326387">六角學院–Vue 3 實戰影音課程</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ES6-語法糖與新增語法&quot;&gt;&lt;a href=&quot;#ES6-語法糖與新增語法&quot; class=&quot;headerlink&quot; title=&quot;ES6 語法糖與新增語法&quot;&gt;&lt;/a&gt;ES6 語法糖與新增語法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;語法糖&lt;/strong&gt;：即為&lt;strong&gt;縮寫&lt;/strong&gt;，寫法更為簡潔，但不影響運作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新增語法&lt;/strong&gt;：寫法簡潔，但會影響作。 ex.箭頭函式</summary>
    
    
    
    <category term="前端" scheme="https://winniewuwinnie.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://winniewuwinnie.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
